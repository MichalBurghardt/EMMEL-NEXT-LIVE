"use client";

import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { useAuth } from '@/hooks/useAuth';
import { useNotification } from '@/hooks/useNotification';
import { Button, Card, Input, Checkbox, Label } from '@/components/UI';

interface LoginFormProps {
  onSuccess?: () => void;
  redirectTo?: string;
}

/**
 * Fixed Login Form Component
 * Contains a structured login form with proper error handling and German translations
 */
const LoginForm: React.FC<LoginFormProps> = ({ 
  onSuccess, 
  redirectTo = '/dashboard' 
}) => {
  const router = useRouter();
  const { login } = useAuth();
  const { show } = useNotification();
  
  const [loading, setLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    rememberMe: false
  });
  const [errors, setErrors] = useState({
    email: '',
    password: ''
  });

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value, type, checked } = e.target;
    
    // Clear error for changed field
    if (errors[name as keyof typeof errors]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
    
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));
  };

  const validateForm = (): boolean => {
    let isValid = true;
    const newErrors = { email: '', password: '' };
    
    // Email validation
    if (!formData.email) {
      newErrors.email = 'E-Mail-Adresse ist erforderlich';
      isValid = false;
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = 'Ungültige E-Mail-Adresse';
      isValid = false;
    }
    
    // Password validation
    if (!formData.password) {
      newErrors.password = 'Passwort ist erforderlich';
      isValid = false;
    }
    
    setErrors(newErrors);
    return isValid;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }
      setLoading(true);
    try {
      // For development/demo purposes, always succeed and set a demo token
      // REMOVE THIS FOR PRODUCTION
      if (formData.email === 'demo@example.com' && formData.password === 'demopass') {
        localStorage.setItem('auth_token', 'demo-token-for-development');
        show('success', 'Demo-Login erfolgreich!');
        router.push(redirectTo);
        setLoading(false);
        return;
      }

      // Use the login method from useAuth hook
      const success = await login(formData.email, formData.password);
      
      if (success) {
        show('success', 'Anmeldung erfolgreich!');
        
        // Handle successful login
        if (onSuccess) {
          onSuccess();
        } else {
          router.push(redirectTo);
        }
      } else {
        show('error', 'Anmeldung fehlgeschlagen. Bitte überprüfen Sie Ihre Anmeldedaten.');
      }    } catch (err) {
      console.error('Login error:', err);
      show('error', 'Anmeldung fehlgeschlagen. Bitte überprüfen Sie Ihre Anmeldedaten.');
    } finally {
      setLoading(false);
    }
  };

  // Eye icon for password visibility toggle
  const PasswordToggleIcon = () => (
    <button
      type="button"
      className="text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 focus:outline-none"
      onClick={() => setShowPassword(!showPassword)}
    >
      {showPassword ? (
        // Closed eye icon
        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21" />
        </svg>
      ) : (
        // Open eye icon
        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
        </svg>
      )}
    </button>
  );
  // Email icon
  const EmailIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-500 dark:text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
    </svg>
  );

  // Lock icon
  const LockIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-500 dark:text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
    </svg>
  );  const [animatedForm, setAnimatedForm] = useState(false);
  const [biometricSupported, setBiometricSupported] = useState(false);
  
  // Animation beim Laden
  useEffect(() => {
    // Verzögerung für die Animation
    setTimeout(() => setAnimatedForm(true), 300);
    
    // Prüfen, ob biometrische Authentifizierung unterstützt wird
    if (typeof window !== 'undefined' && 'PublicKeyCredential' in window) {
      setBiometricSupported(true);
    }
  }, []);  // Biometrische Anmeldung Funktion
  const handleBiometricLogin = async () => {
    setLoading(true);
    try {
      // In einem echten System würde hier die Web Authentication API verwendet werden
      setTimeout(() => {
        show('info', 'Biometrische Anmeldung simuliert');
        router.push(redirectTo);
      }, 1500);
    } catch (_) {
      show('error', 'Biometrische Authentifizierung fehlgeschlagen');
      setLoading(false);
    }
  };

  // Futuristische Gradienten-Ecke für das Formular
  const GradientCorner = () => (
    <div className="absolute -top-1 -right-1 w-20 h-20">
      <div className="absolute transform rotate-45 w-20 h-2 bg-gradient-to-r from-violet-500 via-blue-500 to-transparent"></div>
      <div className="absolute transform rotate-45 h-20 w-2 bg-gradient-to-b from-violet-500 via-blue-500 to-transparent"></div>
    </div>
  );

  return (
    <Card
      variant="default"
      elevation="lg"
      padding="lg"
      className={`w-full glass-card bg-white/5 dark:bg-gray-900/20 border-0 rounded-2xl overflow-hidden transition-all duration-700 ${
        animatedForm ? 'translate-y-0 opacity-100' : 'translate-y-10 opacity-0'
      }`}
    >
      <GradientCorner />
      
      {/* Logo und Branding */}
      <div className="flex flex-col items-center justify-center mb-8 relative">
        {/* Animierter Lichteffekt hinter dem Logo */}
        <div className="absolute -top-10 w-40 h-40 bg-blue-500/20 rounded-full filter blur-3xl animate-pulse"></div>
        
        <div className="w-16 h-16 relative mb-4">
          {/* Holographischer Rahmen */}
          <div className="absolute inset-0 rounded-full bg-gradient-to-r from-violet-500 via-blue-500 to-emerald-400 opacity-70 blur-sm animate-border-glow"></div>
          
          {/* Logo Container */}
          <div className="w-full h-full bg-gradient-to-br from-blue-600 to-indigo-800 dark:from-blue-500 dark:to-indigo-700 rounded-full flex items-center justify-center relative z-10">
            {/* Logo Icon mit moderner Variante */}
            <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M12 11c0 3.517-1.009 6.799-2.753 9.571m-3.44-2.04l.054-.09A13.916 13.916 0 008 11a4 4 0 118 0c0 1.017-.07 2.019-.203 3m-2.118 6.844A21.88 21.88 0 0015.171 17m3.839 1.132c.645-2.266.99-4.659.99-7.132A8 8 0 008 4.07M3 15.364c.64-1.319 1-2.8 1-4.364 0-1.457.39-2.823 1.07-4" />
            </svg>
          </div>
        </div>
        
        <h1 className="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-white via-blue-200 to-blue-100 dark:from-white dark:via-blue-200 dark:to-blue-300">Willkommen zurück</h1>
        <p className="text-gray-300 dark:text-gray-300 mt-2 text-opacity-90">EMMEL Security System • 2025</p>
      </div>
      
      <form onSubmit={handleSubmit} className="space-y-6">
        <div className="space-y-2">
          <Label htmlFor="email" required className="font-medium text-white dark:text-blue-50 flex items-center text-sm">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2 text-blue-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207" />
            </svg>
            E-Mail-Adresse
          </Label>
          <div className="relative group">            <Input
              id="email"
              name="email"
              type="email"
              value={formData.email}
              onChange={handleChange}
              placeholder="max.mustermann@beispiel.de"
              error={errors.email}
              required
              className="neo-input input-futuristic h-12 pl-11 bg-white/5 dark:bg-gray-800/30 border-white/10 dark:border-gray-700/30 text-white placeholder-gray-400 focus:ring-blue-500/50 focus:border-blue-400"
            />
            <div className="absolute left-0 top-0 h-full w-10 flex items-center justify-center text-blue-400">
              <EmailIcon />
            </div>
          </div>
        </div>
        
        <div className="space-y-2">
          <div className="flex items-center justify-between">
            <Label htmlFor="password" required className="font-medium text-white dark:text-blue-50 flex items-center text-sm">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2 text-blue-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
              </svg>
              Passwort
            </Label>
            <a href="#" className="text-xs font-medium text-blue-400 hover:text-blue-300 transition-colors">
              Passwort vergessen?
            </a>
          </div>
          <div className="relative group">
            <Input
              id="password"
              name="password"
              type={showPassword ? "text" : "password"}
              value={formData.password}
              onChange={handleChange}
              placeholder="••••••••"
              rightIcon={<PasswordToggleIcon />}
              error={errors.password}
              required
              className="neo-input input-futuristic h-12 pl-11 pr-10 bg-white/5 dark:bg-gray-800/30 border-white/10 dark:border-gray-700/30 text-white placeholder-gray-400 focus:ring-blue-500/50 focus:border-blue-400"
            />
            <div className="absolute left-0 top-0 h-full w-10 flex items-center justify-center text-blue-400">
              <LockIcon />
            </div>
          </div>
        </div>
          <div className="flex items-center">
          <Checkbox
            id="rememberMe"
            name="rememberMe"
            checked={formData.rememberMe}
            onChange={handleChange}
            label="Angemeldet bleiben"
            className="text-blue-500 focus:ring-blue-400"
          />
        </div>
        
        <div className="space-y-4">
          <Button
            type="submit"
            variant="primary"
            size="lg"
            fullWidth
            loading={loading}
            className="btn-futuristic h-12 relative holographic"
          >
            {loading ? 'Authentifizierung...' : 'Anmelden'}
          </Button>
          
          {biometricSupported && (
            <button
              type="button"
              onClick={handleBiometricLogin}
              disabled={loading}
              className="w-full flex items-center justify-center py-2 px-4 rounded-lg bg-white/5 hover:bg-white/10 border border-white/10 transition-all duration-300 text-blue-300"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M6.625 2.655A9 9 0 0119 11a1 1 0 11-2 0 7 7 0 00-9.625-6.492 1 1 0 11-.75-1.853zM4.662 4.959A1 1 0 014.75 6.37 6.97 6.97 0 003 11a1 1 0 11-2 0 8.97 8.97 0 012.25-5.953 1 1 0 011.412-.088z" clipRule="evenodd" />
                <path fillRule="evenodd" d="M5 11a5 5 0 1110 0 1 1 0 11-2 0 3 3 0 10-6 0c0 1.677-.345 3.276-.968 4.729a1 1 0 11-1.838-.789A9.964 9.964 0 005 11zm8.921 2.012a1 1 0 01.831 1.145 19.86 19.86 0 01-.545 2.436 1 1 0 11-1.92-.558c.207-.713.371-1.445.49-2.192a1 1 0 011.144-.83z" clipRule="evenodd" />
              </svg>
              Biometrische Anmeldung
            </button>
          )}
        </div>
      </form>

      <div className="relative mt-8 pt-8 text-center">
        <div className="absolute inset-x-0 top-0 h-px bg-gradient-to-r from-transparent via-blue-500/30 dark:via-blue-400/30 to-transparent"></div>
        <p className="text-gray-300 dark:text-gray-300 text-sm">
          Noch kein Konto?{' '}
          <a href="/register" className="font-medium text-blue-400 dark:text-blue-400 hover:text-blue-300 transition-colors">
            Jetzt registrieren
          </a>
        </p>
      </div>
    </Card>
  );
};

export default LoginForm;
